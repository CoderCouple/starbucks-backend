<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE module PUBLIC "-//Checkstyle//DTD Checkstyle Configuration 1.3//EN" "https://checkstyle.org/dtds/configuration_1_3.dtd">
<module name="Checker">

    <!-- Enforce no tabs, only spaces for indent. -->
    <module name="FileTabCharacter">
        <property name="eachLine" value="true"/>
        <property name="severity" value="error"/>
    </module>

    <!-- Enforce Unix newlines. -->
    <module name="NewlineAtEndOfFile">
        <property name="lineSeparator" value="lf"/>
        <property name="severity" value="error"/>
    </module>

    <!-- Check each Java file for violations. -->
    <module name="TreeWalker">

        <!-- Constants (static finals) must be uppercase letters/digits/underscore. -->
        <module name="ConstantName">
            <property name="format" value="^[A-Z][A-Z0-9_]*$"/>
            <property name="severity" value="error"/>
        </module>

        <!-- Duplicate import checking. -->
        <module name="RedundantImport">
            <property name="severity" value="error"/>
        </module>

        <!-- Unused imports checking. -->
        <module name="UnusedImports">
            <property name="severity" value="error"/>
        </module>

        <!-- Method name check. -->
        <module name="MethodName">
            <property name="format" value="^[a-z][a-zA-Z0-9]*$"/>
            <property name="severity" value="error"/>
        </module>

        <!-- Local variable name check. -->
        <module name="LocalVariableName">
            <property name="format" value="^[a-z][a-zA-Z0-9]*$"/>
            <property name="severity" value="error"/>
        </module>

        <!-- Local variable name check. -->
        <module name="LocalFinalVariableName">
            <property name="format" value="^[a-z][a-zA-Z0-9]*$"/>
            <property name="severity" value="error"/>
        </module>

        <!-- Member name check. -->
        <module name="MemberName">
            <property name="format" value="^[a-z][a-zA-Z0-9]*$"/>
            <property name="severity" value="error"/>
        </module>

        <!-- Class name check. -->
        <module name="TypeName">
            <property name="format" value="^[A-Z][a-zA-Z0-9]*$"/>
            <property name="severity" value="error"/>
        </module>

        <!-- Left curly goes on end of line (eol). -->
        <module name="LeftCurly">
            <property name="option" value="eol"/>
            <property name="severity" value="error"/>
        </module>

        <!-- Right curly goes same line as 'else', 'try', and 'catch'. -->
        <module name="RightCurly">
            <property name="option" value="same"/>
            <property name="severity" value="error"/>
        </module>

        <!-- Need braces for all code blocks. -->
        <module name="NeedBraces">
            <property name="severity" value="error"/>
        </module>

        <!-- Checks that a token is surrounded by whitespace. -->
        <module name="WhitespaceAround">
            <property name="severity" value="error"/>
        </module>

        <!-- Checks that a token is followed by whitespace. -->
        <module name="WhitespaceAfter">
            <property name="severity" value="error"/>
        </module>

        <!-- Checks the policy on the padding of parentheses. -->
        <module name="ParenPad">
            <property name="severity" value="error"/>
        </module>

        <!-- Fails if there is whitespace around generic '<' '>' characters. -->
        <module name="GenericWhitespace">
            <property name="severity" value="error"/>
        </module>

        <!-- Cyclomatic complexity limit of 7. -->
        <module name="CyclomaticComplexity">
            <property name="max" value="7"/>
            <property name="severity" value="warning"/>
        </module>

        <!-- Checks that long constants are defined with an upper ell. 'l' looks too much like '1'. -->
        <module name="UpperEll">
            <property name="severity" value="error"/>
        </module>

        <!-- Enforce Java array type style. -->
        <module name="ArrayTypeStyle">
            <property name="severity" value="error"/>
        </module>

        <!-- Not enforcing Javadoc checkstyles... for now -->
        <!-- Simple Javadoc style check. -->
        <module name="JavadocStyle">
            <property name="severity" value="ignore"/>
        </module>

        <!-- Checks Javadoc comments for class and interface definitions. -->
        <module name="JavadocType">
            <property name="scope" value="protected"/>
            <property name="severity" value="ignore"/>
        </module>

        <!-- Checks the Javadoc of a method or constructor. -->
        <module name="JavadocMethod">
            <property name="scope" value="protected"/>
            <property name="allowThrowsTagsForSubclasses" value="true"/>
            <property name="allowUndeclaredRTE" value="true"/>
            <property name="severity" value="ignore"/>
        </module>

        <!-- Checks that variables have Javadoc comments. -->
        <module name="JavadocVariable">
            <property name="scope" value="protected"/>
            <property name="severity" value="ignore"/>
        </module>

        <!-- Checks if a line it too long. -->
        <module name="LineLength">
            <property name="max" value="120"/>
            <property name="severity" value="ignore"/>
        </module>

        <!-- Checks if each case statement in a switch has a break, otherwise a comment of the pattern
        "fallthru|fall through|fallthrough|falls through" -->
        <module name="FallThrough">
            <property name="severity" value="error"/>
        </module>

        <!-- Checks that there aren't wildcard imports -->
        <module name="AvoidStarImport">
            <property name="allowClassImports" value="false"/>
            <property name="allowStaticMemberImports" value="false"/>
            <property name="severity" value="error"/>
        </module>

        <!-- Checks that all parameters should be final -->
        <module name="FinalParameters">
            <property name="tokens" value="METHOD_DEF,CTOR_DEF,LITERAL_CATCH,FOR_EACH_CLAUSE"/>
            <property name="severity" value="error"/>
        </module>

        <!-- Checks that any combination of String literals is on the left side of an equals() comparison. Also checks for String literals assigned to some field (such as someString.equals(anotherString = "text")). -->
        <module name="StringLiteralEquality">
            <property name="severity" value="warning"/>
        </module>

        <!-- Checks that string literals are not used with == or !=. -->
        <module name="EqualsAvoidNull">
            <property name="severity" value="warning"/>
        </module>
    </module>

</module>